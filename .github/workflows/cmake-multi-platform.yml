# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build FPS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      id: strings
      shell: bash
      run: |
        sudo apt-key adv --fetch-keys https://repos.codelite.org/CodeLite.asc
        # 生成一个文件 /etc/apt/sources.list.d/archive_uri-https_repos_codelite_org_wx3_2_ubuntu_-jammy.list
        # 不需要可以删除掉
        sudo apt-add-repository 'deb https://repos.codelite.org/wx3.2/ubuntu/ jammy universe'

        #3，安装库
        sudo apt-get install libwxbase3.2-0-unofficial \
                libwxbase3.2unofficial-dev \
                libwxgtk3.2-0-unofficial   \
                libwxgtk3.2unofficial-dev  \
                wx3.2-headers              \
                wx-common                  \
                libnotify-dev
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: FPS

        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: ${{ github.workspace }}/build/bin/FreePictureSplitter
